enchant();

//変数宣言
var game;

//Webページが読み込まれたら
addEventListener( 'load', function() {
	game = new Core(320,320);	//ゲームオブジェクトの作成
    // フレームレートの設定。15fpsに設定
    game.fps = 15;
    game.preload( '../img/character/Gilbert2.png' );	//画像をプリロード
    game.preload('../img/map/map1.png');

    //マップとの接触判定
    function bottom_collisionCheck(mapName,splite){
        if(mapName.hitTest(splite.x+32 ,splite.y + 16 )){
            console.log("通れない："+ (splite.x + 32));
            return true;
        }else{
            return false;
        }
    }

    game.onload = function(){


        //========================
        //  マップデータ見栄え用
        var block = [
            [35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35],
            [35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35],
            [35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35],
            [35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35],
            [35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35],
            [35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35],
            [35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35],
            [35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35],
            [35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35],
            [35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35],
            [35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35],
            [35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35],
            [35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35],
            [35,35,35, 2, 2, 2,35,35, 2, 2,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35],
            [35,35,35,35,35,35,35,35, 2, 2, 2,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35],
            [35,35,35,35,35,35,35, 2, 2, 2, 2, 2,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35],
            [35,35,35,35,35,35, 2, 2, 2, 2, 2, 2, 2,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35],
            [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
            [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
        ];

        //マップデータ判定用
        var col_block = [
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,1,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
            [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
        ];
        //========================




        backgroundMap = new Map(16, 16);
        backgroundMap.image = game.assets['../img/map/map1.png'];
        backgroundMap.loadData(block);
        backgroundMap.collisionData = col_block;

        //goalflagの設定
        var goalflag = new Sprite(32,32);
        goalflag.image = game.assets["../img/character/Gilbert2.png"];
        goalflag.x = 200;
        goalflag.y =240;

        //弾を打ってから10フレーム後にtrueになる
        var frame_flag = true;
        //弾を打ってからフレームを数える
        var frame_count = 0;
        
        
        var Gilbert = new Sprite(32, 32);
        var Gil_farstposition = [0,140]
        Gilbert.image = game.assets["../img/character/Gilbert2.png"];
        Gilbert.x = Gil_farstposition[0];
        Gilbert.y = Gil_farstposition[1];
        Gilbert.prey = Gil_farstposition[1];
        Gilbert.ay = 15;
        Gilbert.frame = 1;
        Gilbert.jumpFlg = false;
        Gilbert.jumpingFlg = false;
        Gilbert.jumpPower = 8;
        Gilbert.addEventListener(Event.ENTER_FRAME, function(e) {
            if (game.input.up && Gilbert.jumpingFlg === false) {
               Gilbert.jumpFlg = true;
            }

            if (game.input.right) {
                 //→キー
                if(backgroundMap.hitTest(Gilbert.x+32 ,Gilbert.y + 17 )){
                }else{
                    Gilbert.frame = (Gilbert.age%5) + 1;
                    Gilbert.x += 3;
                    Gilbert.scaleX = 1;
                }
            }
            if (game.input.left) {
                //←キー
                if(backgroundMap.hitTest(Gilbert.x-1 ,Gilbert.y + 17 )){
                }else{
                    Gilbert.frame = (Gilbert.age%5) + 1;
                    Gilbert.x -= 3;
                    Gilbert.scaleX = -1;
                }
            }
            //=============
            //ジャンプ処理
            //=============
            if(Gilbert.jumpFlg){
                if(!Gilbert.jumpingFlg){
                    Gilbert.jumpingFlg = true;
                    Gilbert.prey = Gilbert.y;
                }else{
                    //y座標を決める処理
                    Gilbert.y = Gilbert.prey - Gilbert.jumpPower--;

                    //y座標が衝突する場合
                    while(backgroundMap.hitTest(Gilbert.x+16 ,Gilbert.y + 32 )){
                        Gilbert.y = Gilbert.prey - (++Gilbert.jumpPower);
                        if(!backgroundMap.hitTest(Gilbert.x+16 ,Gilbert.y + 32 )){
                            Gilbert.y++;
                            Gilbert.jumpingFlg = false;
                            Gilbert.jumpFlg = false;
                            Gilbert.jumpPower = 8;
                            break;
                        }
                    }
                    Gilbert.prey = Gilbert.y;
                }
            }

            //===========================================
            //足元に地面がない場合はジャンプ中とみなす
            //ただし上には飛べないのでjumpPowerは0とする
            //===========================================
            if(!backgroundMap.hitTest(Gilbert.x+16 ,Gilbert.y + 32 ) && Gilbert.jumpingFlg !== true){
                Gilbert.jumpFlg = true;
                Gilbert.jumpPower = 0;
            }
            
            //===========================================
            //弾の発射処理
            //間隔を10フレーム開けて発射する
            //
            //===========================================

            var bullet;

            if(frame_flag==true){
                //frame_flagがtrueかつaボタン（Zキー）が押された時
                if ( game.input.a ) {
                    frame_flag = false
                    //frame_flagをfalseする
                    //hitABullet関数を実行
                    hitABullet();
                }

            }
            
            //上で呼ばれるhitABullet関数作成
            function hitABullet() {
                //弾を作成
                bullet = new Bullet();
	            stage.addChild( bullet );
            
            }

            //前回弾を打ってから10フレーム未満の場合
            if(frame_flag==false){
                
                frame_count = frame_count + 1;
                
            }

            //前回弾を打ってから10フレームたった場合
            if(frame_count == 10){

                frame_flag = true;
                frame_count = 0;

            }


            //===========================================
            //ゴール処理
            //===========================================
            if(Gilbert.x >= goalflag.x && Gilbert.x < goalflag.x+3){
    
                alert("gameclear");

            }
        });

        //===========================================
        //弾のクラス作成
        //===========================================
        var Bullet = Class.create( Sprite, {
            initialize: function() {
                var bulletX, bulletY;	//弾のX座標とY座標
                Sprite.call( this, 32, 32 );	//Spriteクラスのメソッドを、thisでも使えるようにする
                this.image = game.assets["../img/character/Gilbert2.png"];	//スプライトの画像ファイルを指定
                //プレイヤーの向きによって弾の位置や動かす方向を変える
                if ( Gilbert.scaleX >= 0 ) {
                    this.speed = 10;
                    bulletX = Gilbert.x + 5;
                } else {
                    this.speed = -10;
                    bulletX = Gilbert.x - 5;
                }
                bulletY = Gilbert.y + 0;
                this.moveTo( bulletX, bulletY );	//弾の位置
            },
            onenterframe: function() {

                this.x += this.speed;	//弾の移動

                //弾の位置が座標で150以上又は0以下になった時に弾を削除
                if(this.x >= 150 || this.x <= 0){

                    stage.removeChild(this);

                }

            }

        } );

        var stage = new Group();//マップとキャラクターを同時に管理するためにグループとして統括（スクロールするときに必要）
        stage.addChild(backgroundMap);
        stage.addChild(Gilbert);
        stage.addChild(goalflag);
        stage.addEventListener(Event.ENTER_FRAME, function(e) {
        if(stage.x > 64 - Gilbert.x)
            stage.x = 64 - Gilbert.x;
        });

        game.rootScene.addChild(stage);
        //========================
        //  マップを画面に表示
        //========================
        //game.rootScene.addChild(backgroundMap);

        //========================
        //  くまを画面に表示
        //========================
        //gil = new Gilbert(0,140);
    }

    
    game.start();	//ゲームスタート
});
